"""/***************************************************************************  
 * Copyright Â© 2024 SiClarity, Inc.  
 * All rights reserved.  
 *  
 * File Name: settings.py  
 * Description: This configuration file contains the settings for various aspects of the application, including:
                
                1. **Database Configurations**:
                   - Specifies the connection details for the database, such as the database engine, host, port, username, password, and name of the database. These settings allow the application to establish a secure connection to the database for storing and retrieving data.
                
                2. **Storage Preferences Configurations**:
                   - Defines the settings for file storage, including locations for storing files (e.g., uploaded media, logs) and the preferred storage backend (e.g., local disk or cloud storage). It can also define settings for file management, such as file size limits and allowed file types.
                
                3. **JWT (JSON Web Token) Configurations**:
                   - Configures the JWT settings, which are used for secure authentication and authorization within the application. This includes settings such as the secret key used for signing JWTs, token expiration time, and the algorithm used to encode/decode the tokens.
                
                4. **Allowed Hosts Configurations**:
                   - Lists the host/domain names that are permitted to connect to the application. This setting helps prevent unauthorized access from untrusted sources by ensuring that requests are only accepted from trusted hosts or IP addresses.
                
                This configuration file helps centralize and manage various application settings, making it easier to configure, maintain, and scale the application.
 *  
 * Author: Mansi Mahadik 
 * Created On: 17-12-2024
 *  
 * This source code and associated materials are the property of SiClarity, Inc.  
 * Unauthorized copying, modification, distribution, or use of this software,  
 * in whole or in part, is strictly prohibited without prior written permission  
 * from SiClarity, Inc.  
 *  
 * Disclaimer:  
 * This software is provided "as is," without any express or implied warranties,  
 * including but not limited to warranties of merchantability, fitness for a  
 * particular purpose, or non-infringement. In no event shall SiClarity, Inc.  
 * be held liable for any damages arising from the use of this software.  
 *  
 * SiClarity and its logo are trademarks of SiClarity, Inc.  
 *  
 * For inquiries, contact: support@siclarity.com  
 ***************************************************************************/"""
"""
Django settings for SiVista_BE project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from dotenv import load_dotenv, find_dotenv
from pathlib import Path
from datetime import timedelta
from django.conf import settings
import redis
import json
import datetime
from cryptography.fernet import Fernet
import boto3
from google.cloud import storage as gcs_storage
from io import BytesIO

django_env = os.getenv('DJANGO_ENV')
env_file = find_dotenv(django_env)
load_dotenv(env_file)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_2quix_6-bc2b1l7y!g796yinar5vf4fl$4rz8-f8)phc9fajx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if django_env == '.env.dev':
    DOMAIN_HOST=os.getenv('DOMAIN_DEV')
    VERSION=os.getenv('VERSION_DEV')
    REDIS_HOST = os.getenv('REDIS_HOST_DEV')
    REDIS_PORT = os.getenv('REDIS_PORT_DEV')
elif django_env == '.env.dev.patch':
    DOMAIN_HOST=os.getenv('DOMAIN_DEV')
    VERSION=os.getenv('VERSION_DEV')
    REDIS_HOST = os.getenv('REDIS_HOST_DEV')
    REDIS_PORT = os.getenv('REDIS_PORT_DEV')
elif django_env == '.env.qa.patch':
    DOMAIN_HOST=os.getenv('DOMAIN_QA')
    VERSION=os.getenv('VERSION_QA')
    REDIS_HOST = os.getenv('REDIS_HOST_QA')
    REDIS_PORT = os.getenv('REDIS_PORT_QA')
elif django_env == '.env.qa':
    DOMAIN_HOST=os.getenv('DOMAIN_QA')
    VERSION=os.getenv('VERSION_QA')
    REDIS_HOST = os.getenv('REDIS_HOST_QA')
    REDIS_PORT = os.getenv('REDIS_PORT_QA')
elif django_env == '.env.local':
    DOMAIN_HOST=os.getenv('DOMAIN_LOCAL')
    VERSION = os.getenv('VERSION_LOCAL')
    REDIS_HOST = os.getenv('REDIS_HOST_LOCAL')
    REDIS_PORT = os.getenv('REDIS_PORT_LOCAL')
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
if DOMAIN_HOST:
    ALLOWED_HOSTS.append(DOMAIN_HOST)
CORS_ALLOW_ALL_ORIGINS = True
# Application definition

#redis_instance = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/0",  # Use local Redis instance
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
        }
    }
}

INSTALLED_APPS = [
    'daphne',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'src.Apps.user.Login',
    'src.Apps.project.ProjectManager',
    'src.Apps.netlist.NetlistManager',
    'src.Apps.project.StageManager',
    'src.Apps.tech.TechManager',
    'src.Apps.project.MLRunner',
    'src.Apps.user.AdminManager',
    'src.Apps.user.UserManager',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'drf_yasg',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'src.Apps.user.Login.middleware.JWTMiddleware',

]

ROOT_URLCONF = 'SiVista_BE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'SiVista_BE.wsgi.application'
ASGI_APPLICATION = 'SiVista_BE.asgi.application'


# Channels layer using Redis
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}

AUTH_USER_MODEL = 'Login.User'

#Rest Framework Configuration for token creation
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

#Swagger Configuration
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "JWT [Bearer {JWT}]": {
            "name": "Authorization",
            "type": "apiKey",
            "in": "header",
        }
    },
    "USE_SESSION_AUTH": False,
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# Database Configurations
if django_env == '.env.dev':
    DATABASES =  {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DBNAME_DEV'),
            'USER': os.getenv('USERNAME_DEV'),
            'PASSWORD': os.getenv('PASSWORD_DEV'),
            'HOST': os.getenv('HOST_DEV'),
            'PORT': os.getenv('PORT_DEV'),
    }
    }
elif django_env == '.env.qa':
    DATABASES =  {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DBNAME_QA'),
            'USER': os.getenv('USERNAME_QA'),
            'PASSWORD': os.getenv('PASSWORD_QA'),
            'HOST': os.getenv('HOST_QA'),
            'PORT': os.getenv('PORT_QA'),  
    }
    }
if django_env == '.env.dev.patch':
    DATABASES =  {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DBNAME_DEV'),
            'USER': os.getenv('USERNAME_DEV'),
            'PASSWORD': os.getenv('PASSWORD_DEV'),
            'HOST': os.getenv('HOST_DEV'),
            'PORT': os.getenv('PORT_DEV'),
    }
    }
elif django_env == '.env.qa.patch':
    DATABASES =  {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DBNAME_QA'),
            'USER': os.getenv('USERNAME_QA'),
            'PASSWORD': os.getenv('PASSWORD_QA'),
            'HOST': os.getenv('HOST_QA'),
            'PORT': os.getenv('PORT_QA'),  
    }
    }
elif os.getenv('DJANGO_ENV')=='.env.local':
# Database Configurations
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DBNAME_LOCAL'),
        'USER': os.getenv('USERNAME_LOCAL'),
        'PASSWORD': os.getenv('PASSWORD_LOCAL'),
        'HOST': os.getenv('HOST_LOCAL'),
        'PORT': os.getenv('PORT_LOCAL'),
        }
    }
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# S3 Configurations
if django_env == '.env.dev':
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID_DEV')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY_DEV')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME_DEV')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME_DEV')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN_DEV')
    AWS_S3_OBJECT_PARAMETERS= os.getenv('AWS_S3_OBJECT_PARAMETERS_DEV')
    AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL_DEV')
    DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE_DEV')
    S3_BUCKET_ROOT = 'SiVistaDevRoot'
    GRPC_CHANNEL = os.getenv('GRPC_CHANNEL_DEV')
    GOOGLE_APPLICATION_CREDENTIALS=os.getenv('GOOGLE_APPLICATION_CREDENTIALS_DEV')
    GOOGLE_STORAGE_BUCKET_NAME=os.getenv('GOOGLE_STORAGE_BUCKET_NAME_DEV')
elif os.getenv('DJANGO_ENV')=='.env.qa':
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID_QA')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY_QA')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME_QA')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME_QA')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN_QA')
    AWS_S3_OBJECT_PARAMETERS= os.getenv('AWS_S3_OBJECT_PARAMETERS_QA')
    AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL_QA')
    DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE_QA')
    S3_BUCKET_ROOT = 'SiVistaQARoot'
    GRPC_CHANNEL = os.getenv('GRPC_CHANNEL_QA')
    GOOGLE_APPLICATION_CREDENTIALS=os.getenv('GOOGLE_APPLICATION_CREDENTIALS_QA')
    GOOGLE_STORAGE_BUCKET_NAME=os.getenv('GOOGLE_STORAGE_BUCKET_NAME_QA')
elif django_env == '.env.dev.patch':
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID_DEV')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY_DEV')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME_DEV')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME_DEV')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN_DEV')
    AWS_S3_OBJECT_PARAMETERS= os.getenv('AWS_S3_OBJECT_PARAMETERS_DEV')
    AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL_DEV')
    DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE_DEV')
    S3_BUCKET_ROOT = 'SiVistaDevRoot'
    GRPC_CHANNEL = os.getenv('GRPC_CHANNEL_DEV')
    GOOGLE_APPLICATION_CREDENTIALS=os.getenv('GOOGLE_APPLICATION_CREDENTIALS_DEV')
    GOOGLE_STORAGE_BUCKET_NAME=os.getenv('GOOGLE_STORAGE_BUCKET_NAME_DEV')
elif django_env == '.env.qa.patch':
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID_QA')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY_QA')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME_QA')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME_QA')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN_QA')
    AWS_S3_OBJECT_PARAMETERS= os.getenv('AWS_S3_OBJECT_PARAMETERS_QA')
    AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL_QA')
    DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE_QA')
    S3_BUCKET_ROOT = 'SiVistaQARoot'
    GRPC_CHANNEL = os.getenv('GRPC_CHANNEL_QA')
    GOOGLE_APPLICATION_CREDENTIALS=os.getenv('GOOGLE_APPLICATION_CREDENTIALS_QA')
    GOOGLE_STORAGE_BUCKET_NAME=os.getenv('GOOGLE_STORAGE_BUCKET_NAME_QA')
elif os.getenv('DJANGO_ENV')=='.env.local':
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID_LOCAL')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY_LOCAL')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME_LOCAL')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME_LOCAL')
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN_LOCAL')
    AWS_S3_OBJECT_PARAMETERS= os.getenv('AWS_S3_OBJECT_PARAMETERS_LOCAL')
    AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL_LOCAL')
    DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE_LOCAL')
    S3_BUCKET_ROOT = os.getenv('S3_BUCKET_ROOT_LOCAL')
    GRPC_CHANNEL = os.getenv('GRPC_CHANNEL_LOCAL')
    GOOGLE_APPLICATION_CREDENTIALS=os.getenv('GOOGLE_APPLICATION_CREDENTIALS_LOCAL')
    GOOGLE_STORAGE_BUCKET_NAME=os.getenv('GOOGLE_STORAGE_BUCKET_NAME_LOCAL')


FileEncryptionKey ='bR-VBosnouO7SBZRc6hGfNSDLQKgkjNv59uLPNb_MUc='

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Local folder configurations
if os.getenv('DJANGO_ENV')=='.env.dev':
    LOCAL_BASE_PATH = os.getenv('LOCAL_BASE_PATH_DEV')
elif os.getenv('DJANGO_ENV')=='.env.qa':
    LOCAL_BASE_PATH = os.getenv('LOCAL_BASE_PATH_QA')
elif os.getenv('DJANGO_ENV')=='.env.local':
    LOCAL_BASE_PATH = os.getenv('LOCAL_BASE_PATH_LOCAL')
elif os.getenv('DJANGO_ENV')=='.env.dev.patch':
    LOCAL_BASE_PATH = os.getenv('LOCAL_BASE_PATH_DEV_PATCH')
elif os.getenv('DJANGO_ENV')=='.env.qa.patch':
    LOCAL_BASE_PATH = os.getenv('LOCAL_BASE_PATH_QA_PATCH')
    
STORAGE_TYPE = os.getenv('STORAGE_TYPE')
ADMIN_USERNAME='ADMIN'
NAME='ADMIN'
ADMIN_EMAIL='admin@example.com'
ADMIN_PASSWORD='S!Clar!ty@12345'
CONCURRENT_USER_LIMIT = 10
LICENSE_CUTOFF_DATE = None

fernet = Fernet(FileEncryptionKey)
# Paths/configs per storage type
local_license_path = os.path.join(LOCAL_BASE_PATH, 'license.enc')
s3_bucket = AWS_STORAGE_BUCKET_NAME
gcs_bucket = GOOGLE_STORAGE_BUCKET_NAME
key ='license.enc'

try:
    if STORAGE_TYPE == 'local':
        with open(local_license_path, 'rb') as f:
            encrypted_data = f.read()

    elif STORAGE_TYPE == 's3':
        s3_client = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_S3_REGION_NAME
        )
        obj = s3_client.get_object(Bucket=AWS_STORAGE_BUCKET_NAME, Key=key)
        encrypted_data = obj['Body'].read()

    elif STORAGE_TYPE == 'gcs':
        gcs_client = gcs_storage.Client()
        bucket = gcs_client.bucket(gcs_bucket)
        blob = bucket.blob(key)
        encrypted_data = blob.download_as_bytes()

    else:
        raise ValueError(f"Unsupported storage type: {STORAGE_TYPE}")


# Decrypt and parse
    decrypted_data = fernet.decrypt(encrypted_data)
    license_data = json.loads(decrypted_data.decode('utf-8'))
    cutoff_date_str = license_data.get("support_end_date")
    concurrent_user_limit = license_data.get("concurrent_user_limit")

    if not cutoff_date_str or not concurrent_user_limit:
        print("Invalid license file format. Please check the license.")
    else:
        LICENSE_CUTOFF_DATE = datetime.datetime.fromisoformat(cutoff_date_str)
        CONCURRENT_USER_LIMIT = int(concurrent_user_limit)

except Exception as e:
    print(f"Error loading license file from {STORAGE_TYPE}: {e}")
