import unittest
import os
import pandas as pd
import shutil

class ModelTests(unittest.TestCase):

    def setUp(self):
        self.golden_data_path = './golden_data/pex_test'
        self.cell_names = ['AOI21X1']
        self.generated_data_path = './pex_test'

    def tearDown(self):
        pass # happening in test_cleanup.py

    def test_pex_predictions(self):
        for cell_name in self.cell_names:
            mismatches = []
            cell_data_path = f'{self.generated_data_path}/{cell_name}/'
            for dirname in os.listdir(cell_data_path):
                assert os.path.isdir(os.path.join(cell_data_path, dirname)), f"{dirname} is not a directory"
                capacitance_file = f'{dirname}/capacitance/{cell_name}_GDS_PEX_PREDICTION_ML.csv'
                resistance_file = f'{dirname}/resistance/{cell_name}_predicted_equivalent_resistance.csv'
                for filename in [capacitance_file, resistance_file]:
                    # Get the csv file that was generated by test_datagen
                    generated_file_path = os.path.join(cell_data_path, filename)
                    assert os.path.exists(generated_file_path), f"File {generated_file_path} does not exist"
                    generated_df = pd.read_csv(generated_file_path)
                    assert not generated_df.empty, f"Generated file {generated_file_path} is empty"
                    # Get the corresponding golden file
                    golden_file_path = os.path.join(self.golden_data_path, cell_name, filename)
                    assert os.path.exists(golden_file_path), f"Golden data file {golden_file_path} does not exist"
                    golden_df = pd.read_csv(golden_file_path)
                    assert not golden_df.empty, f"Golden data file {golden_file_path} is empty"
                    # Compare the dataframes after sorting columns + rows alphabetically and rounding values
                    generated_df = generated_df.reindex(sorted(generated_df.columns), axis=1)
                    golden_df = golden_df.reindex(sorted(golden_df.columns), axis=1)
                    generated_df = generated_df.sort_values(by='File')
                    golden_df = golden_df.sort_values(by='File')
                    generated_df = generated_df.reset_index(drop=True)
                    golden_df = golden_df.reset_index(drop=True)
                    numeric_cols = generated_df.select_dtypes(include='number').columns
                    generated_df[numeric_cols] = generated_df[numeric_cols].round(2)
                    golden_df[numeric_cols] = golden_df[numeric_cols].round(2)
                    if not generated_df.equals(golden_df):
                        mismatches.append(f"Data mismatch between {generated_file_path} and {golden_file_path}")
            for m in mismatches:
                print(m)
            assert len(mismatches) == 0

if __name__ == '__main__':
    unittest.main()