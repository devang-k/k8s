name: SiVista_Dev_k8s_exec_deploy

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      CI: True
      PORT: 50051
      ML_ENV: .env.dev
      AWS_ACCESS_KEY_ID_DEV: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      AWS_SECRET_ACCESS_KEY_DEV: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
      AWS_STORAGE_BUCKET_NAME_DEV: sivista-dev-k8s-storage
      AWS_S3_REGION_NAME_DEV: ap-south-1
      SHARED_MEMORY: /app/shared_memory/
      mount_source: shared_memory_volume_sivista_integration
      mount_target: /app/shared_memory
      THIRD_PARTY_GRPC: 13.126.133.62:30003
      STORAGE_TYPE: s3
      IMAGE_NAME: siclarity/sivista_ml
      CONTAINER_NAME: sivistaML
      ENABLE_ELASTIC_LOGGING: false


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: activating virtual environment - installing dependencie - creating pkg
        run: |
          VENV_DIR="../sivista_core_venv"
          if [ -d "$VENV_DIR" ]; then
            echo "Virtual environment found in '$VENV_DIR'. Activating..."
          else
            echo "Virtual environment not found. Creating one in '$VENV_DIR'..."
            python3 -m venv "$VENV_DIR"
            if [ $? -eq 0 ]; then
              echo "Virtual environment created successfully."
            else
              echo "Failed to create virtual environment. Exiting."
              exit 1
            fi
          fi

          # Source the virtual environment
          if [ -f "$VENV_DIR/bin/activate" ]; then
            source "$VENV_DIR/bin/activate"
            echo "Virtual environment activated."
          else
            echo "Failed to activate virtual environment. Ensure Python3 and venv module are installed."
            exit 1
          fi

          # install dependencies
          pip install -r requirements.txt

          # create executable package
          pyinstaller grpc_server.spec

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Version from version.conf
        id: extract_version
        run: |
          version=$(grep 'VERSION=' version.conf | cut -d '"' -f 2)
          echo "Version is: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Log Push Details
        run: |
          echo "Push event to branch: ${{ github.ref_name }}"
          echo "Commit SHA: ${{ github.sha }}"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PATL }}

      - name: Set dynamic environment variables
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/${REPO_NAME}/sivista_ml_sprint4"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build --no-cache --progress=plain \
            -t $IMAGE_NAME:${{ steps.extract_version.outputs.version }} \
            -f Dockerfile.ex_pkg \
            --build-arg SHARED_MEMORY=${{ env.SHARED_MEMORY }} \
            --build-arg THIRD_PARTY_GRPC=${{ env.THIRD_PARTY_GRPC }} \
            --build-arg PORT=${{ env.PORT }} \
            --build-arg ML_ENV=${{ env.ML_ENV }} \
            --build-arg AWS_ACCESS_KEY_ID_DEV="${{ env.AWS_ACCESS_KEY_ID_DEV }}" \
            --build-arg AWS_SECRET_ACCESS_KEY_DEV="${{ env.AWS_SECRET_ACCESS_KEY_DEV }}" \
            --build-arg AWS_STORAGE_BUCKET_NAME_DEV="${{ env.AWS_STORAGE_BUCKET_NAME_DEV }}" \
            --build-arg AWS_S3_REGION_NAME_DEV="${{ env.AWS_S3_REGION_NAME_DEV }}" \
            --build-arg STORAGE_TYPE="${{ env.STORAGE_TYPE }}" \
            --build-arg ENABLE_ELASTIC_LOGGING="${{ env.ENABLE_ELASTIC_LOGGING }}" .

      - name: Push Docker Image
        run: |
          docker push $IMAGE_NAME:${{ steps.extract_version.outputs.version }}

    outputs:
      version: ${{ steps.extract_version.outputs.version }}